# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

#########################
# Application Shortcuts #
#########################
# cmd - d : "Show Spotlight Search"
# cmd - b : "Show Finder search window"
cmd - t : open -n -a kitty --args -1 -d $HOME
cmd - w : open -n -a qutebrowser
shift + cmd - w : open -n -a Google\ Chrome


###########################
# Window Manager Commands #
###########################

# mission control
cmd - m : yabai -m space --toggle mission-control

# close window
shift + cmd - d : yabai -m window --close

# set layout
ctrl + cmd - b : yabai -m space --layout bsp
ctrl + cmd - n : yabai -m space --layout stack
ctrl + cmd - m : yabai -m space --layout float

# set window split type
# use alt here instead of cmd to avoid cmd-v paste conflict
alt - s : yabai -m window --insert south
alt - v : yabai -m window --insert east

# focus window
cmd - h : yabai -m window --focus west;\
          yabai -m window --focus stack.first
cmd - j : yabai -m window --focus south;\
          yabai -m window --focus stack.next
cmd - k : yabai -m window --focus north;\
          yabai -m window --focus stack.prev
cmd - l : yabai -m window --focus east;\
          yabai -m window --focus stack.last

# swap managed window
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east

# fast focus desktop
ctrl + alt - h : yabai -m space --focus prev
ctrl + alt - l : yabai -m space --focus next
ctrl + alt - q : yabai -m space --focus recent

cmd - 1 : yabai -m space --focus 1
cmd - 2 : yabai -m space --focus 2
cmd - 3 : yabai -m space --focus 3
cmd - 4 : yabai -m space --focus 4
cmd - 5 : yabai -m space --focus 5
cmd - 6 : yabai -m space --focus 6
cmd - 7 : yabai -m space --focus 7
cmd - 8 : yabai -m space --focus 8
cmd - 9 : yabai -m space --focus 9
cmd - 0 : yabai -m space --focus 10
cmd + alt - 1 : yabai -m space --focus 11
cmd + alt - 2 : yabai -m space --focus 12
cmd + alt - 3 : yabai -m space --focus 13
cmd + alt - 4 : yabai -m space --focus 14
cmd + alt - 5 : yabai -m space --focus 15
cmd + alt - 6 : yabai -m space --focus 16
cmd + alt - 7 : yabai -m space --focus 17
cmd + alt - 8 : yabai -m space --focus 18
cmd + alt - 9 : yabai -m space --focus 19
cmd + alt - 0 : yabai -m space --focus 20

# send window to desktop
shift + cmd - 1 : yabai -m window --space 1
shift + cmd - 2 : yabai -m window --space 2
shift + cmd - 3 : yabai -m window --space 3
shift + cmd - 4 : yabai -m window --space 4
shift + cmd - 5 : yabai -m window --space 5
shift + cmd - 6 : yabai -m window --space 6
shift + cmd - 7 : yabai -m window --space 7
shift + cmd - 8 : yabai -m window --space 8
shift + cmd - 9 : yabai -m window --space 9
shift + cmd - 0 : yabai -m window --space 10
shift + cmd + alt - 1 : yabai -m window --space 11
shift + cmd + alt - 2 : yabai -m window --space 12
shift + cmd + alt - 3 : yabai -m window --space 13
shift + cmd + alt - 4 : yabai -m window --space 14
shift + cmd + alt - 5 : yabai -m window --space 15
shift + cmd + alt - 6 : yabai -m window --space 16
shift + cmd + alt - 7 : yabai -m window --space 17
shift + cmd + alt - 8 : yabai -m window --space 18
shift + cmd + alt - 9 : yabai -m window --space 19
shift + cmd + alt - 0 : yabai -m window --space 20

# toggle window zoom
cmd - f : yabai -m window --toggle zoom-fullscreen

# balance size of windows (shift + cmd + '=')
shift + cmd - 0x18 : yabai -m space --balance

# increase window size
shift + cmd - right : yabai -m window --resize right:20:0;\
                      yabai -m window --resize left:-20:0
shift + cmd - down : yabai -m window --resize bottom:0:20;\
                     yabai -m window --resize top:0:-20

# decrease window size
shift + cmd - left : yabai -m window --resize right:-20:0;\
                     yabai -m window --resize left:20:0
shift + cmd - up : yabai -m window --resize bottom:0:-20;\
                   yabai -m window --resize top:0:20

# float / unfloat window and center on screen (shift + cmd + space)
shift + cmd - 0x31 : yabai -m window --toggle float;\
                     yabai -m window --grid 4:4:1:1:2:2
