#!/usr/bin/perl
#
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 100%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.

use strict;
use warnings;
use utf8;

my $acpi;
my $status;
my $percent;
my $full_text;
my $short_text;
my $bat_number = $ENV{BLOCK_INSTANCE} || 0;

# read the first line of the "acpi" command output
open (ACPI, "acpi -b | grep 'Battery $bat_number' |") or die;
$acpi = <ACPI>;
close(ACPI);

# fail on unexpected output
if ($acpi !~ /: (\w+), (\d+)%/) {
	die "$acpi\n";
}

$status = $1;

if ($status eq 'Discharging') {
	$full_text = 'BATT ';
} elsif ($status eq 'Charging') {
	$full_text = 'CHRG ';
} elsif ($status eq 'Unknown') {
    $full_text = 'DONE '
}

$percent = $2;
if ($percent eq '0') {
    exit(0)
} else {
    $full_text .= "$percent%";
}

$short_text = $full_text;

if ($acpi =~ /(\d\d:\d\d):/) {
	$full_text .= " ($1)";
}

# print text
print "$full_text\n";
print "$short_text\n";

if ($status eq 'Discharging') {
    if ($percent >= 80) {
        print "#FF00FF\n";
    } elsif ($percent >= 64) {
        print "#00FF00\n";
    } elsif ($percent >= 40) {
        exit(0);
    } elsif ($percent >= 20) {
        print "#FFFF00\n";
    } elsif ($percent >= 10) {
        print "#FF0000\n";
    } else {
        exit(33);
    }
} elsif ($status eq 'Charging') {
    if ($percent >= 80) {
        print "#FF00FF\n";
    } elsif ($percent >= 64) {
        print "#4AA5FF\n";
    } elsif ($percent >= 40) {
        print "#00FF00\n";
    } else {
        exit(0);
    }
} elsif ($status eq 'Unknown') {
    print "#00FFFF\n";
}

exit(0);
